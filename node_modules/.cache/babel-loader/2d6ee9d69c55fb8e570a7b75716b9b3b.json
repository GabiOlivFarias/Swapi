{"remainingRequest":"/home/gabi/JERA/outros/Swapi/node_modules/babel-loader/lib/index.js!/home/gabi/JERA/outros/Swapi/node_modules/vuetify/lib/components/VCalendar/modes/common.js","dependencies":[{"path":"/home/gabi/JERA/outros/Swapi/node_modules/vuetify/lib/components/VCalendar/modes/common.js","mtime":499162500000},{"path":"/home/gabi/JERA/outros/Swapi/babel.config.js","mtime":1661951552984},{"path":"/home/gabi/JERA/outros/Swapi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gabi/JERA/outros/Swapi/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZ2V0VGltZXN0YW1wSWRlbnRpZmllciB9IGZyb20gJy4uL3V0aWwvdGltZXN0YW1wJzsKY29uc3QgTUlMTElTX0lOX0RBWSA9IDg2NDAwMDAwOwpleHBvcnQgZnVuY3Rpb24gZ2V0VmlzdWFscyhldmVudHMsIG1pblN0YXJ0ID0gMCkgewogIGNvbnN0IHZpc3VhbHMgPSBldmVudHMubWFwKGV2ZW50ID0+ICh7CiAgICBldmVudCwKICAgIGNvbHVtbkNvdW50OiAwLAogICAgY29sdW1uOiAwLAogICAgbGVmdDogMCwKICAgIHdpZHRoOiAxMDAKICB9KSk7CiAgdmlzdWFscy5zb3J0KChhLCBiKSA9PiB7CiAgICByZXR1cm4gTWF0aC5tYXgobWluU3RhcnQsIGEuZXZlbnQuc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyKSAtIE1hdGgubWF4KG1pblN0YXJ0LCBiLmV2ZW50LnN0YXJ0VGltZXN0YW1wSWRlbnRpZmllcikgfHwgYi5ldmVudC5lbmRUaW1lc3RhbXBJZGVudGlmaWVyIC0gYS5ldmVudC5lbmRUaW1lc3RhbXBJZGVudGlmaWVyOwogIH0pOwogIHJldHVybiB2aXN1YWxzOwp9CmV4cG9ydCBmdW5jdGlvbiBoYXNPdmVybGFwKHMwLCBlMCwgczEsIGUxLCBleGNsdWRlID0gdHJ1ZSkgewogIHJldHVybiBleGNsdWRlID8gIShzMCA+PSBlMSB8fCBlMCA8PSBzMSkgOiAhKHMwID4gZTEgfHwgZTAgPCBzMSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHNldENvbHVtbkNvdW50KGdyb3VwcykgewogIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHsKICAgIGdyb3VwLnZpc3VhbHMuZm9yRWFjaChncm91cFZpc3VhbCA9PiB7CiAgICAgIGdyb3VwVmlzdWFsLmNvbHVtbkNvdW50ID0gZ3JvdXBzLmxlbmd0aDsKICAgIH0pOwogIH0pOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5nZShldmVudCkgewogIHJldHVybiBbZXZlbnQuc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyLCBldmVudC5lbmRUaW1lc3RhbXBJZGVudGlmaWVyXTsKfQpleHBvcnQgZnVuY3Rpb24gZ2V0RGF5UmFuZ2UoZXZlbnQpIHsKICByZXR1cm4gW2V2ZW50LnN0YXJ0SWRlbnRpZmllciwgZXZlbnQuZW5kSWRlbnRpZmllcl07Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRSYW5nZShldmVudCwgZGF5U3RhcnQpIHsKICByZXR1cm4gW01hdGgubWF4KGRheVN0YXJ0LCBldmVudC5zdGFydFRpbWVzdGFtcElkZW50aWZpZXIpLCBNYXRoLm1pbihkYXlTdGFydCArIE1JTExJU19JTl9EQVksIGV2ZW50LmVuZFRpbWVzdGFtcElkZW50aWZpZXIpXTsKfQpleHBvcnQgZnVuY3Rpb24gZ2V0T3Blbkdyb3VwKGdyb3Vwcywgc3RhcnQsIGVuZCwgdGltZWQpIHsKICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykgewogICAgY29uc3QgZ3JvdXAgPSBncm91cHNbaV07CiAgICBsZXQgaW50ZXJzZWN0ZWQgPSBmYWxzZTsKCiAgICBpZiAoaGFzT3ZlcmxhcChzdGFydCwgZW5kLCBncm91cC5zdGFydCwgZ3JvdXAuZW5kLCB0aW1lZCkpIHsKICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBncm91cC52aXN1YWxzLmxlbmd0aDsgaysrKSB7CiAgICAgICAgY29uc3QgZ3JvdXBWaXN1YWwgPSBncm91cC52aXN1YWxzW2tdOwogICAgICAgIGNvbnN0IFtncm91cFN0YXJ0LCBncm91cEVuZF0gPSB0aW1lZCA/IGdldFJhbmdlKGdyb3VwVmlzdWFsLmV2ZW50KSA6IGdldERheVJhbmdlKGdyb3VwVmlzdWFsLmV2ZW50KTsKCiAgICAgICAgaWYgKGhhc092ZXJsYXAoc3RhcnQsIGVuZCwgZ3JvdXBTdGFydCwgZ3JvdXBFbmQsIHRpbWVkKSkgewogICAgICAgICAgaW50ZXJzZWN0ZWQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKCFpbnRlcnNlY3RlZCkgewogICAgICByZXR1cm4gaTsKICAgIH0KICB9CgogIHJldHVybiAtMTsKfQpleHBvcnQgZnVuY3Rpb24gZ2V0T3ZlcmxhcEdyb3VwSGFuZGxlcihmaXJzdFdlZWtkYXkpIHsKICBjb25zdCBoYW5kbGVyID0gewogICAgZ3JvdXBzOiBbXSwKICAgIG1pbjogLTEsCiAgICBtYXg6IC0xLAogICAgcmVzZXQ6ICgpID0+IHsKICAgICAgaGFuZGxlci5ncm91cHMgPSBbXTsKICAgICAgaGFuZGxlci5taW4gPSBoYW5kbGVyLm1heCA9IC0xOwogICAgfSwKICAgIGdldFZpc3VhbHM6IChkYXksIGRheUV2ZW50cywgdGltZWQsIHJlc2V0ID0gZmFsc2UpID0+IHsKICAgICAgaWYgKGRheS53ZWVrZGF5ID09PSBmaXJzdFdlZWtkYXkgfHwgcmVzZXQpIHsKICAgICAgICBoYW5kbGVyLnJlc2V0KCk7CiAgICAgIH0KCiAgICAgIGNvbnN0IGRheVN0YXJ0ID0gZ2V0VGltZXN0YW1wSWRlbnRpZmllcihkYXkpOwogICAgICBjb25zdCB2aXN1YWxzID0gZ2V0VmlzdWFscyhkYXlFdmVudHMsIGRheVN0YXJ0KTsKICAgICAgdmlzdWFscy5mb3JFYWNoKHZpc3VhbCA9PiB7CiAgICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gdGltZWQgPyBnZXRSYW5nZSh2aXN1YWwuZXZlbnQpIDogZ2V0RGF5UmFuZ2UodmlzdWFsLmV2ZW50KTsKCiAgICAgICAgaWYgKGhhbmRsZXIuZ3JvdXBzLmxlbmd0aCA+IDAgJiYgIWhhc092ZXJsYXAoc3RhcnQsIGVuZCwgaGFuZGxlci5taW4sIGhhbmRsZXIubWF4LCB0aW1lZCkpIHsKICAgICAgICAgIHNldENvbHVtbkNvdW50KGhhbmRsZXIuZ3JvdXBzKTsKICAgICAgICAgIGhhbmRsZXIucmVzZXQoKTsKICAgICAgICB9CgogICAgICAgIGxldCB0YXJnZXRHcm91cCA9IGdldE9wZW5Hcm91cChoYW5kbGVyLmdyb3Vwcywgc3RhcnQsIGVuZCwgdGltZWQpOwoKICAgICAgICBpZiAodGFyZ2V0R3JvdXAgPT09IC0xKSB7CiAgICAgICAgICB0YXJnZXRHcm91cCA9IGhhbmRsZXIuZ3JvdXBzLmxlbmd0aDsKICAgICAgICAgIGhhbmRsZXIuZ3JvdXBzLnB1c2goewogICAgICAgICAgICBzdGFydCwKICAgICAgICAgICAgZW5kLAogICAgICAgICAgICB2aXN1YWxzOiBbXQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCB0YXJnZXQgPSBoYW5kbGVyLmdyb3Vwc1t0YXJnZXRHcm91cF07CiAgICAgICAgdGFyZ2V0LnZpc3VhbHMucHVzaCh2aXN1YWwpOwogICAgICAgIHRhcmdldC5zdGFydCA9IE1hdGgubWluKHRhcmdldC5zdGFydCwgc3RhcnQpOwogICAgICAgIHRhcmdldC5lbmQgPSBNYXRoLm1heCh0YXJnZXQuZW5kLCBlbmQpOwogICAgICAgIHZpc3VhbC5jb2x1bW4gPSB0YXJnZXRHcm91cDsKCiAgICAgICAgaWYgKGhhbmRsZXIubWluID09PSAtMSkgewogICAgICAgICAgaGFuZGxlci5taW4gPSBzdGFydDsKICAgICAgICAgIGhhbmRsZXIubWF4ID0gZW5kOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBoYW5kbGVyLm1pbiA9IE1hdGgubWluKGhhbmRsZXIubWluLCBzdGFydCk7CiAgICAgICAgICBoYW5kbGVyLm1heCA9IE1hdGgubWF4KGhhbmRsZXIubWF4LCBlbmQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHNldENvbHVtbkNvdW50KGhhbmRsZXIuZ3JvdXBzKTsKCiAgICAgIGlmICh0aW1lZCkgewogICAgICAgIGhhbmRsZXIucmVzZXQoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHZpc3VhbHM7CiAgICB9CiAgfTsKICByZXR1cm4gaGFuZGxlcjsKfQ=="},{"version":3,"mappings":"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","names":["getTimestampIdentifier","MILLIS_IN_DAY","getVisuals","events","minStart","visuals","map","event","columnCount","column","left","width","sort","a","b","Math","max","startTimestampIdentifier","endTimestampIdentifier","hasOverlap","s0","e0","s1","e1","exclude","setColumnCount","groups","forEach","group","groupVisual","length","getRange","getDayRange","startIdentifier","endIdentifier","getNormalizedRange","dayStart","min","getOpenGroup","start","end","timed","i","intersected","k","groupStart","groupEnd","getOverlapGroupHandler","firstWeekday","handler","reset","day","dayEvents","weekday","visual","targetGroup","push","target"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/common.ts"],"sourcesContent":["import { CalendarEventParsed, CalendarEventVisual, CalendarTimestamp } from 'vuetify/types'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\nconst MILLIS_IN_DAY = 86400000\n\nexport type GetRange = (event: CalendarEventParsed) => [number, number]\n\nexport function getVisuals (events: CalendarEventParsed[], minStart = 0): CalendarEventVisual[] {\n  const visuals = events.map(event => ({\n    event,\n    columnCount: 0,\n    column: 0,\n    left: 0,\n    width: 100,\n  }))\n\n  visuals.sort((a, b) => {\n    return (Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier)) ||\n           (b.event.endTimestampIdentifier - a.event.endTimestampIdentifier)\n  })\n\n  return visuals\n}\n\nexport interface ColumnGroup {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\nexport function hasOverlap (s0: number, e0: number, s1: number, e1: number, exclude = true): boolean {\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1)\n}\n\nexport function setColumnCount (groups: ColumnGroup[]) {\n  groups.forEach(group => {\n    group.visuals.forEach(groupVisual => {\n      groupVisual.columnCount = groups.length\n    })\n  })\n}\n\nexport function getRange (event: CalendarEventParsed): [number, number] {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier]\n}\n\nexport function getDayRange (event: CalendarEventParsed): [number, number] {\n  return [event.startIdentifier, event.endIdentifier]\n}\n\nexport function getNormalizedRange (event: CalendarEventParsed, dayStart: number): [number, number] {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)]\n}\n\nexport function getOpenGroup (groups: ColumnGroup[], start: number, end: number, timed: boolean) {\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i]\n    let intersected = false\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (let k = 0; k < group.visuals.length; k++) {\n        const groupVisual = group.visuals[k]\n        const [groupStart, groupEnd] = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event)\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true\n          break\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function getOverlapGroupHandler (firstWeekday: number) {\n  const handler = {\n    groups: [] as ColumnGroup[],\n    min: -1,\n    max: -1,\n    reset: () => {\n      handler.groups = []\n      handler.min = handler.max = -1\n    },\n    getVisuals: (day: CalendarTimestamp, dayEvents: CalendarEventParsed[], timed: boolean, reset = false) => {\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset()\n      }\n\n      const dayStart = getTimestampIdentifier(day)\n      const visuals = getVisuals(dayEvents, dayStart)\n\n      visuals.forEach(visual => {\n        const [start, end] = timed ? getRange(visual.event) : getDayRange(visual.event)\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups)\n          handler.reset()\n        }\n\n        let targetGroup = getOpenGroup(handler.groups, start, end, timed)\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length\n\n          handler.groups.push({ start, end, visuals: [] })\n        }\n\n        const target = handler.groups[targetGroup]\n        target.visuals.push(visual)\n        target.start = Math.min(target.start, start)\n        target.end = Math.max(target.end, end)\n\n        visual.column = targetGroup\n\n        if (handler.min === -1) {\n          handler.min = start\n          handler.max = end\n        } else {\n          handler.min = Math.min(handler.min, start)\n          handler.max = Math.max(handler.max, end)\n        }\n      })\n\n      setColumnCount(handler.groups)\n\n      if (timed) {\n        handler.reset()\n      }\n\n      return visuals\n    },\n  }\n\n  return handler\n}\n"]}]}